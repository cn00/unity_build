#!/bin/sh


function ResetExitOnErr()
{
    set -e
}
function ResetDebug()
{
    set +x
}

if [[ "${#@}" = "0" ]];then
    echo -e "usage: genIpa [-CDRGKEU] [-I [bundle_identifier]]
    -C|--AutoCommit         Auto commit config to repository
    -D|--Debug              Debug build
    -R|--Release            Release build
    --A3Channel string      Channel
    --LocalTest             true for odd buildNumber for LocalTest
    -E|--ExportIOSProj      Export iOS project
    -S|--Simulator          iOS simulator project
    -N|--IncrBuildNo        Increase build nomber
    --IncrMajorVersion      Increase major version
    --IncrMinorVersion      Increase minor version
    --IncrPatchVersion      Increase patch version
    -A|--XcodeArchive       Xcode archive
    -P|--ExportIpa          Xcode export ipa
    -I|--Identify bundleId  iOS project bundle identifier
    -K|--KillUnity          Kill Unity process
    -U|--UploadProduct      Upload ipa to itunesconnect.apple.com for testflight
    -F|--UploadFtp          Upload ipa to ftp
"
    exit 1
fi

function SetColor()
{
    set +x
    Reset='\033[00m'
    Red='\033[01;31m'
    Green='\033[01;32m'
    Yellow='\033[01;33m'
    Purple='\033[01;35m'
    Cyan='\033[01;36m'
    White='\033[01;37m'
    Bold='\033[1m'
    Underline='\033[4m'
    ResetDebug
}

if [[ "${JENKINS_HOME}x" = "x" ]];then
    ResetDebug
    SetColor
    echo="echo -e"
else
    echo="echo"
fi

if [[ ! -d "Assets" ]]; then
   ${echo} "${Red}Error: Not an Unity project dir${Reset}" 
   ${echo} "${Yellow}Place run genIpa in an Unity project WORKSPACE with an \"Assets\"${Reset}"
   exit 1
fi

temp=$(getopt -o CDFRSKENUI:AP --long LocalTest,UploadFtp,A3Channel:,Simulator,ExportIpa,XcodeArchive,Debug,Release,KillUnity,ExportIOSProj,UploadProduct,Identify:,\
IncrBuildNo,IncrMajorVersion,IncrMinorVersion,IncrPatchVersion -- "$@")
if [ $? != 0  ] ; then 
    echo "terminating..." >&2 
    exit 1 
fi
eval set -- "$temp"

while true;do
    case "$1" in
    -A|--XcodeArchive)
        XcodeArchive="true";
        shift
    ;;
    --LocalTest)
        LocalTest="true";
        shift
    ;;
    -P|--ExportIpa)
        ExportIpa="true"
        shift
    ;;
    --A3Channel)
        A3Channel="$2";
        shift 2
    ;;
    -C|AutoCommit)
        AutoCommit="true";
        shift
    ;;
    -D|--Debug) 
        export configuration="Debug"; 
        shift
    ;;
    -R|--Release) 
        export configuration="Release"; 
        shift
    ;;
    -K|--KillUnity)
        KillUnity="true";
        shift
    ;;
    -S|--Simulator)
        IosProjDir="ios.sim.proj"
        Simulator="true";
        shift
    ;;
    -N|--IncrBuildNo) 
        IncrBuildNo="true"; 
        shift
    ;;
    --IncrMajorVersion) 
        IncrMajorVersion="true"; 
        shift
    ;;
    --IncrMinorVersion) 
        IncrMinorVersion="true"; 
        shift
    ;;
    --IncrPatchVersion) 
        IncrPatchVersion="true"; 
        shift
    ;;
    -E|--ExportIOSProj) 
        ExportIOSProj="true"; 
        shift
    ;;
    -U|--UploadProduct) 
        UploadProduct="true"; 
        shift
    ;;
    -F|--UploadFtp) 
        UploadFtp="true"; 
        shift
    ;;
    -I|--Identify) 
        Identify="$2"; 
        shift 2
    ;;
    --) 
        shift;
        break
    ;;
    *) 
        echo -e "unknow arg:[$1]"; 
        shift
    ;;
    esac
done

set +x
source ~/.bash_pw
ResetDebug

## these options may pass by jenkins
XcodeArchive=${XcodeArchive-"false"}
LocalTest=${LocalTest-"true"}
ExportIpa=${ExportIpa-"false"}
export configuration=${configuration-"Release"} # export let mono csharp can catch this
ExportIOSProj=${ExportIOSProj-"false"} 
UploadProduct=${UploadProduct-"false"}
UploadFtp=${UploadFtp-"false"}
KillUnity=${KillUnity-"true"}
Identify=${Identify-"com.bilibili.a3"}

NewBundleVersion="1.0.0"
NewBuildNumber="1"
A3Channel=${A3Channel-"ios_bili_cb1"}
A3Channel=${A3Channel%#*}

AutoCommit=${AutoCommit-"false"}
IncrBuildNo=${IncrBuildNo-"false"}
IncrMajorVersion=${IncrMajorVersion-"false"}
IncrMinorVersion=${IncrMinorVersion-"false"}
IncrPatchVersion=${IncrPatchVersion-"false"}
Simulator="false"

ShellDir=$(cd `dirname $0`;pwd)
BasePath=$(cd `dirname .`;pwd)
WORKSPACE="${WORKSPACE-${BasePath}}"
export IosProjDir="ios.proj.${A3Channel/*_/}"
ProductDir="${WORKSPACE}/bin"
mkdir -p "${ProductDir}"

SchemeName="Unity-iPhone"
ArchiveName="game"
Date=$(date "+%Y%m%d")
DateTime=$(date "+%m%d%H%M")

GitSvn="false"
set +e
git svn info > /dev/null
if [[ "$?" = "0" ]];then
    GitSvn="true"
fi
ResetExitOnErr

sysname=$(uname)
sysname=${sysname:0:6}
if [[ "${sysname}x" = "Darwinx" ]];then
    Unity="Unity"
    sed="gsed"
else
    sed="sed"
    Unity="Unity"
fi

${echo} "${Green}Unity-iPhone package tool${Reset} >"

function DoCommit()
{
    local file="$1"
    local msg="$2"
    local command="${ShellDir}/commit"
    $command "${file}" "${msg}"
}

function DoExportIOSProj()
{
    set +e
    if [[ "${KillUnity}x" = "truex" ]];then
        ${echo} "kill unity"
        ps -A | grep "Unity .*$(pwd)" | sed '/grep/d' | awk '{print $1}' | xargs -I % sudo kill -9 "%"
        ps -A | grep "Unity$" | sed '/grep/d' | awk '{print $1}' | xargs -I % sudo kill -9 "%"
    fi
    ResetExitOnErr

    local executeMethod="BuildScript.ExportIOSProj"
    if [[ "${Simulator}x" = "truex" ]];then
        executeMethod="BuildScript.ExportIOSProjSim"
    fi

    local logout="/dev/stdout"
    mkdir -p "log"
    ${echo} "Export IOS Proj ..."
    ${Unity} -projectPath "${WORKSPACE}" \
        -quit \
        -batchmode \
        -executeMethod "${executeMethod}" \
        -logFile "${logout}" | \
        tee "log/unity-${DateTime}.log"

    ${echo} "Export IOS Proj done $?"
}


function DoUpdateConfig()
{
    ${echo} "updatting ProjectSettings.asset ..."
    local projectSettingAsset="ProjectSettings/ProjectSettings.asset"

    # A3Channel
    local appbootcs="Assets/Application/Script/System/App/AppBoot.cs"
    local appbootunity="Assets/Application/Scene/boot.unity"
    local a3channelNo=$(${sed} -n '/'"${A3Channel}"'\s*=/s#\s*'"${A3Channel}"'\s*=\s*\([0-9]\+\).*#\1#p' "${appbootcs}")
    ${sed} -e '/m_A3Channel/{s#\(:\s*\).*#\1'"${a3channelNo}"'#}' -i "${appbootunity}"
    ${echo} "A3Channel: ${A3Channel}=${a3channelNo}"
    
    ## bundle identifier
    #${sed} -e '/CFBundleIdentifier/{n;s#>.*<#>'${ACT_PACKAGE_NAME}'<#g}' -i "${projectSettingAsset}"
 
    ## app name
    # ${sed} -e '/CFBundleDisplayName/{n;s#>.*<#>'${ACT_APP_NAME}'<#g}' -i "${projectSettingAsset}"

    # bundle Version
    local bundleVersion=$(${sed} -n '/bundleVersion/{s#^\s*.*:\s*##p}' "${projectSettingAsset}")
    bundleVersion=${bundleVersion-1.0.0}
    local major=${bundleVersion/\.*}; major=${major:-"0"}
    local minor=${bundleVersion%\.*}; minor=${minor/*\.}; minor=${minor:-"0"}
    local patch=${bundleVersion/*\.}; patch=${patch:-"0"}
    ${echo} "Increase major version? ${IncrMajorVersion}"
    ${echo} "Increase minor version? ${IncrMinorVersion}"
    ${echo} "Increase patch version? ${IncrPatchVersion}"
    if [[ "${IncrMajorVersion}x" = "truex" ]];then
        major=$((major+1))
        minor=0
        patch=0
    elif [[ "${IncrMinorVersion}x" = "truex" ]];then
        minor=$((minor+1))
        patch=0
    elif [[ "${IncrPatchVersion}x" = "truex" ]];then
        patch=$((patch+1))
    fi
    NewBundleVersion="${major}.${minor}.${patch}"
    ${sed} -e '/bundleVersion/{s#\(:\s*\).*#\1'"${NewBundleVersion}"'#}' -i "${projectSettingAsset}"
    echo "${NewBundleVersion}" > "${ProductDir}/version"
    ${echo} "bundleVersion: ${bundleVersion} => ${NewBundleVersion}"
    
    # buildNumber
    local buildNumber=$(${sed} -n '/buildNumber/{n;s#^\s*.*:\s*##p}' "${projectSettingAsset}")
    buildNumber=${buildNumber-'0'}
    NewBuildNumber=${buildNumber}
    ${echo} "Increase build number? ${IncrBuildNo}"
    if [[ "${IncrBuildNo}x" = "truex" ]];then
        # NewBuildNumber=$((buildNumber+1))
        # odd or even for local or world test
        if [[ "$((NewBuildNumber%2))" = "0" ]];then
            if [[ "${LocalTest}x" = "truex" ]];then
                NewBuildNumber=$((NewBuildNumber+1))
            else
                NewBuildNumber=$((NewBuildNumber+2))
            fi
        else # odd
            if [[ "${LocalTest}x" = "truex" ]];then
                NewBuildNumber=$((NewBuildNumber+2))
            else
                NewBuildNumber=$((NewBuildNumber+1))
            fi
        fi
        ${sed} -e '/buildNumber/{n;s#\(:\s*\).*#\1'"${NewBuildNumber}"'#}' -i "${projectSettingAsset}"
    fi

    if [[ "${AutoCommit}x" = "truex" ]];then
        DoCommit "${projectSettingAsset}" "auto upodate iOS ${A3Channel/*_/} buildNumber:${NewBuildNumber}"
    fi
    ${echo} "buildNumber: ${buildNumber} => ${NewBuildNumber}"
}

function DoUnlockKeychain()
{
    security unlock-keychain -p "${syspword}"  "/Users/a3/Library/Keychains/login.keychain"
}

function DoXcodeArchive()
{
    ${echo} "archive ..."
    pushd "${IosProjDir}"
    DoUnlockKeychain

    local OTHER_LDFLAGS="-ObjC -lresolv -weak_framework CoreMotion -weak-lSystem -Wl -undefined dynamic_lookup"
    local archivePath="${ProductDir}/${ArchiveName}-${A3Channel/*_/}-${NewBundleVersion}-${DateTime}-${NewBuildNumber}.xcarchive"
    xcodebuild -scheme "${SchemeName}" \
        -configuration "${configuration}" \
        archive -archivePath "${archivePath}" \
        -allowProvisioningUpdates \
        OTHER_LDFLAGS="${OTHER_LDFLAGS}" \
        PRODUCT_BUNDLE_IDENTIFIER="com.bilibili.a3" \
        SWIFT_VERSION=4.0 \
        LD_RUNPATH_SEARCH_PATHS="@executable_path/Framewoks @loader_path/Frameworks" \
        ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES="YES" \
        ENABLE_BITCODE="NO" \
        DEVELOPMENT_TEAM="UL9WJVVZ42"
    echo "${archivePath}" > "${ProductDir}/lastArchivePath"
    
    popd
    ${echo} "archive done $?"
}


function DoExportIpa()
{
    ${echo} "export ipa ..."
    pushd "${IosProjDir}"
    DoUnlockKeychain

    touch ${ProductDir}/lastArchivePath
    local lastArchivePath="$(cat ${ProductDir}/lastArchivePath)"

    local exportPath="${ProductDir}"
    local exportOptionsPlist="${WORKSPACE}/exportOptionsPlist.plist"
    if [[ ! -f "${exportOptionsPlist}" ]];then
        if [[ -f "~/workspace/exportOptionsPlist.plist" ]];then
            ln "~/workspace/exportOptionsPlist.plist" "${exportOptionsPlist}"
        else
            ${echo} "Can not find ~/workspace/exportOptionsPlist.plist"
            exit -1
        fi
    fi
    xcodebuild -exportArchive \
        -exportPath "${exportPath}" \
        -archivePath "${lastArchivePath}" \
        -exportOptionsPlist "${exportOptionsPlist}" 
    
    local ipa="${lastArchivePath/.xcarchive/.ipa}"
    mv "${exportPath}/${SchemeName}.ipa" "${ipa}"

    echo "${ipa}" > "${ProductDir}/lastIpaPath"

    popd
    ${echo} "export ipa done ${ipa/\/Users\/$(whoami)\/\.jenkins/http://a3.local} $?"

}

function DoUploadFtp()
{
    ${echo} "upload ipa to ftp ..."
    pushd "${IosProjDir}"

    local ipa="$(cat ${ProductDir}/lastIpaPath)"

    local logout="/dev/null"
    if [[ "${JENKINS_HOME}x" = "x" ]];then
        logout="/dev/stdout"
    fi

    local localFile="${ipa}"
    local ftpPath="${NewBundleVersion}/${A3Channel/*_/}/a3-${NewBundleVersion}-${A3Channel}-${Date}-${NewBuildNumber}.ipa"
    curl -u ${ftpuname}:${ftppword} \
        --ftp-create-dirs \
        -T "${localFile}" \
        ${ftpdomain}/${ftpPath} > "${logout}"

    popd
    ${echo} "upload ipa to ftp ${ftpdomain}/${ftpPath} done"
}

function DoUploadIpa()
{
    ${echo} "upload ipa to itunesconnect for testflight ..."
    pushd "${IosProjDir}"

    local ipa="$(cat ${ProductDir}/lastIpaPath)"

    local logout="/dev/null"
    if [[ "${JENKINS_HOME}x" = "x" ]];then
        logout="/dev/stdout"
    fi
    
    local altool="altool"
    ${altool} --upload-app -f "${ipa}" -u "${appleaccount}" -p "${applepsword}" > "${logout}"

    popd
    ${echo} "upload ipa to itunesconnect for testflight done $?"
}

######################### main ######################### 


DoUpdateConfig

${echo} "Export ios project? ${ExportIOSProj}"
if [[  "${ExportIOSProj}x" = "truex" ]];then
    DoExportIOSProj
fi

${echo} "Xcode archive? ${XcodeArchive}"
if [[ "${XcodeArchive}x" = "truex" ]];then
    DoXcodeArchive
fi

${echo} "Xcode ExportIpa? ${ExportIpa}"
if [[ "${ExportIpa}x" = "truex" ]];then
    DoExportIpa
fi
    
${echo} "Upload ipa to ftp? ${UploadFtp}"
if [[ "${UploadFtp}x" = "truex" ]];then
    DoUploadFtp 
fi

${echo} "Upload ipa to itunesconnect? ${UploadProduct}"
if [[ "${UploadProduct}x" = "truex" ]];then
    DoUploadIpa
fi

