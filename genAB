#!/bin/sh
function ResetExitOnErr()
{
    set -e
}
function ResetDebug()
{
    set -x
}
sysname=$(uname)
sysname=${sysname:0:6}
if [[ "${sysname}x" = "Darwinx" ]];then
    Unity="Unity"
    sed="gsed"
else
    sed="sed"
    Unity="Unity"
fi
if [[ "${#@}" = "0" ]];then
echo -e "usage: genAB [-BKUC] [-R [OssBucketRoot]] --A3Channel channel 
     -B|--BuildAB               Build asset bundle
     -C|--AutoCommit            Auto commit to repository
     --Clean                 Clean old bundle
     --A3Channel channel        A3Channel
     -A|--UploadAll             true for all packages, false for today's packages only
     -K|--KillUnity             Kill Unity process
     -U|--UploadProduct         Upload asset bundle to oss
     -R|--OssBucketRoot rname   bucket root
"
     exit 1
 fi
temp=$(getopt -o ABKUR:C --long UploadAll,BuildAB,Kill,UploadProduct,OssBucketRoot:Clean,A3Channel: -- "$@")
if [ $? != 0  ] ; then 
    echo "terminating..." >&2 
    exit 1 
fi
eval set -- "$temp"
while true;do
    case "$1" in
    --A3Channel)
        A3Channel="$2";
        shift 2
    ;;
    -A|--UploadAll)
        UploadAll="true";
        shift
    ;;
    -B|--BuildAB) 
        BuildAB="true"; 
        shift
    ;;
    -K|--Kill) 
        KillUnity="true"; 
        shift
    ;;
    -R|--OssBucketRoot)
        OssBucketRoot="$2"; 
        shift 2
    ;;
    -U|--UploadProduct) 
        UploadProduct="true"; 
        shift
    ;;
    -C|--AutoCommit)
        AutoCommit="true";
        shift
    ;;
    --Clean) 
        Clean="true"; 
        shift
    ;;
    --) 
        shift;
        break
    ;;
    *) 
        echo -e "unknow arg:[$1]"; 
        shift
    ;;
    esac
done
set +x
source ~/.bash_pw
ResetDebug
aloss="${aloss-aliyuncli oss}"
ShellDir=$(cd `dirname $0`;pwd)
BasePath=$(cd `dirname .`;pwd)
WORKSPACE="${WORKSPACE-${BasePath}}"
WORKSPACE=$(cd ${WORKSPACE};pwd)
BuildAB="${BuildAB-false}"
UploadAll="${UploadAll-false}"
UploadProduct="${UploadProduct-false}"
KillUnity="${KillUnity-false}" 
Clean="${Clean-false}"
OssBucketRoot="${OssBucketRoot-${ossa3prod}}"
A3Channel=${A3Channel-"ios_bili_cb1"}
A3Channel=${A3Channel%#*}
function SetColor()
{
    Reset='\033[00m'
    Red='\033[01;31m'
    Green='\033[01;32m'
    Yellow='\033[01;33m'
    Purple='\033[01;35m'
    Cyan='\033[01;36m'
    White='\033[01;37m'
    Bold='\033[1m'
    Underline='\033[4m'
}
if [[ "${JENKINS_HOME}x" = "x" ]];then
    SetColor
    echo="echo -e"
else
    echo="echo"
fi
if [[ ! -d "Assets" ]]; then
   ${echo} "${Red}Not an Unity project dir${Reset}" 
   ${echo} "${Yellow}Place run in an Unity project dir with an \"Assets\"${Reset}"
   exit 1
fi
function DoCommit()
{
    local file="$1"
    local msg="$2"
    local command="${ShellDir}/commit"
    $command "${file}" "${msg}"
}
function DoUpdateConfig()
{
    # A3Channel
    ${echo} "updatting  A3Channel ..."
    local appbootcs="Assets/Application/Script/System/App/SubClass/AppVersionData.cs"
    local appbootunity="Assets/Resources/System/version.asset"
    local a3channelNo=$(${sed} -n '/'"${A3Channel}"'\s*=/s#\s*'"${A3Channel}"'\s*=\s*\([0-9]\+\).*#\1#p' "${appbootcs}")
    ${sed} -e '/m_A3Channel/{s#\(:\s*\).*#\1'"${a3channelNo}"'#}' -i "${appbootunity}"
    DoCommit "${appbootunity}" "#${BUILD_NUMBER} build AssetBundle ${A3Channel}"
    ${echo} "A3Channel: ${A3Channel}=${a3channelNo}"
}
function DoBuildAB()
{
	set +e
    if [[ "${KillUnity}x" = "truex" ]];then
        ${echo} "kill unity"
        ps -A | grep "Unity .*${WORKSPACE}" | sed '/grep/d' | awk '{print $1}' | xargs -I % sudo kill -9 "%"
        ps -A | grep "Unity$" | sed '/grep/d' | awk '{print $1}' | xargs -I % sudo kill -9 "%"
    fi
	# ClearBuild
    ${echo} "clean old build? ${Clean}"
	if [[ "${Clean}x" = "truex" ]];then
        Unity -projectPath "${WORKSPACE}" \
            -quit \
            -batchmode \
            -executeMethod "Project.AssetBundleBuildManager.ClearBuildCli" \
            -logFile "/dev/stdout"
		\rm -rf "${WORKSPACE}/Assets/Application/Editor/Project/AssetBundle/Work/"*
		\rm -rf "${WORKSPACE}/AssetBundle/"*
	fi
	# BuildCli
	local executeMethod="Project.AssetBundleBuildManager.BuildCli"
	Unity -projectPath "${WORKSPACE}" \
        -quit \
        -batchmode \
        -executeMethod "${executeMethod}" \
        -logFile "/dev/stdout"
    ResetExitOnErr	
    # commit bundle build manifest
    local buildManifest="Assets/Application/Editor/Project/AssetBundle/Work/${A3Channel}"
    local versionAsset="Assets/Resources/System/version.asset"
    if [[ "${AutoCommit}x" = "truex" ]];then
        DoCommit "${buildManifest} ${versionAsset}" "auto upodate bundle manifest ${A3Channel} "
    fi
}
function DoUploadOss()
{
    pushd "AssetBundle/Main/${A3Channel}"
    local logout="/dev/null"
    if [[ "${JENKINS_HOME}x" = "x" ]];then
        logout="/dev/stdout"
    fi
    ${echo} "Upload to oss ..."
    local bucketPath="${OssBucketRoot}/${A3Channel/*_}/master"
    # default: only upload today packages
    local mask="-r -d iOS-$(date "+%y%m%d"|sed s/^.//)*"
    if [[ "${UploadAll}x" = "truex" ]];then
        mask="-r ."
    fi
	ls ${mask} | while read l;do
        ${echo} "oss uploading ${l} => ${bucketPath}/${l} ..."
		$aloss UploadDisk "${l}" "${bucketPath}/" \
            --content_type "application/octet-stream" \
            --device_id 1 > "${logout}"
	done
    ${echo} "Upload to oss done"
    popd
}
################################ main ################################
function Main()
{
    set +x
    source ~/.bash_pw
    ResetDebug
    DoUpdateConfig
    ${echo} "Build AssetBundle? ${BuildAB}"
    if [[ "${BuildAB}x" = "truex" ]];then
        DoBuildAB
    fi
    ${echo} "Upload AssetBundle to oss? ${UploadProduct}"
    if [[ "${UploadProduct}x" = "truex" ]];then
        DoUploadOss
    fi
}
Main
